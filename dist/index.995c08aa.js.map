{"mappings":"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","sources":["src/components/Grid.constants.js","src/components/Grid.utils.js","src/components/Grid.eventManager.js","src/components/Cell.js","src/components/Tile.js","src/components/Grid.js","src/index.js"],"sourcesContent":["// eslint-disable-next-line import/prefer-default-export\nexport const GAMEBOARD_SIZE = 4;\n","export const noop = () => {};\n\nexport const canMove = (cellGroup) => cellGroup.some((cells) => cells.some((cell, index) => {\n  if (index === 0) { return false; }\n  if (cell.isEmpty()) { return false; }\n\n  const prevCell = cells[index - 1];\n\n  return prevCell.canAcceptTile(cell.getTile());\n}));\n\nexport const slideTiles = (cellGroup) => {\n  const dirtyCells = [];\n  const transitions = [];\n\n  cellGroup.forEach((cells) => {\n    for (let i = 1; i < cells.length; i += 1) {\n      const currCell = cells[i];\n      let lastValidCell = null;\n\n      // eslint-disable-next-line no-continue\n      if (currCell.isEmpty()) { continue; }\n\n      for (let j = i - 1; j >= 0; j -= 1) {\n        const nextCell = cells[j];\n\n        if (!nextCell.canAcceptTile(currCell.getTile())) { break; }\n\n        lastValidCell = nextCell;\n      }\n\n      if (lastValidCell !== null) {\n        if (lastValidCell.isEmpty()) {\n          lastValidCell.setTile(currCell.getTile());\n        } else {\n          transitions.push(currCell.getTile().delayTransition());\n          lastValidCell.setTileToMerge(currCell.getTile());\n          dirtyCells.push(lastValidCell);\n        }\n\n        currCell.setTile(null);\n      }\n    }\n  });\n\n  return { dirtyCells, transitions };\n};\n\nexport const getRandomBetween = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n","import { noop } from './Grid.utils';\n\nclass GridEventManager {\n  #isPaused = false;\n\n  #boundedKeydownHandler = this.#keydownHandler.bind(this);\n\n  #callback;\n\n  subscribe(callback = noop) {\n    this.#callback = callback;\n\n    window.addEventListener('keydown', this.#boundedKeydownHandler);\n  }\n\n  unsubscribe() {\n    window.removeEventListener('keydown', this.#boundedKeydownHandler);\n  }\n\n  async #keydownHandler(ev) {\n    if (this.#isPaused) { return; }\n\n    this.#isPaused = true;\n\n    await this.#callback(ev.key);\n\n    this.#isPaused = false;\n  }\n}\n\nexport default GridEventManager;\n","class Cell {\n  #x;\n\n  #y;\n\n  #$cell;\n\n  #tile;\n\n  #tileToMerge = null;\n\n  constructor(x, y, tile = null) {\n    this.#x = x;\n    this.#y = y;\n    this.#tile = tile;\n    this.#$cell = document.createElement('div');\n\n    this.#initProps();\n  }\n\n  getX() { return this.#x; }\n\n  getY() { return this.#y; }\n\n  getCoords() {\n    return {\n      x: this.#x,\n      y: this.#y,\n    };\n  }\n\n  getTile() { return this.#tile; }\n\n  getTileToMerge() { return this.#tileToMerge; }\n\n  getElement() { return this.#$cell; }\n\n  setX(x) {\n    this.#x = x;\n\n    this.#$cell.style.setProperty('--x', x);\n\n    return this;\n  }\n\n  setY(y) {\n    this.#y = y;\n\n    this.#$cell.style.setProperty('--y', y);\n\n    return this;\n  }\n\n  setCoords(x, y) {\n    this.setX(x);\n    this.setY(y);\n\n    return this;\n  }\n\n  setTile(tile) {\n    this.#tile = tile;\n\n    if (tile !== null) {\n      tile.setX(this.getX());\n      tile.setY(this.getY());\n    }\n\n    return this;\n  }\n\n  setTileToMerge(tileToMerge) {\n    this.#tileToMerge = tileToMerge;\n\n    tileToMerge.setCoords(this.#tile.getX(), this.#tile.getY());\n    tileToMerge.getElement().style.setProperty('z-index', '1');\n\n    return this;\n  }\n\n  isEmpty() { return !this.#tile; }\n\n  hasTileToMerge() { return this.#tileToMerge; }\n\n  canAcceptTile(tile = null) {\n    return !tile\n      || !this.#tile\n      || (this.#tile.getValue() === tile.getValue() && !this.hasTileToMerge());\n  }\n\n  mergeTiles() {\n    if (this.hasTileToMerge()) {\n      this.#tile.setValue(this.#tileToMerge.getValue() + this.#tile.getValue());\n      this.#tileToMerge.remove();\n\n      this.#tileToMerge = null;\n    }\n\n    return this;\n  }\n\n  #initProps() {\n    this.#$cell.classList.add('cell');\n    this.#$cell.style.setProperty('--x', this.#x);\n    this.#$cell.style.setProperty('--y', this.#y);\n  }\n}\n\nexport default Cell;\n","class Tile {\n  #x;\n\n  #y;\n\n  #value;\n\n  #$tile = document.createElement('div');\n\n  constructor(x, y, value = null) {\n    this.#x = x;\n    this.#y = y;\n    this.#value = value;\n\n    this.#initProps();\n  }\n\n  getX() { return this.#x; }\n\n  getY() { return this.#y; }\n\n  getCoords() {\n    return {\n      x: this.#x,\n      y: this.#y,\n    };\n  }\n\n  getValue() { return this.#value; }\n\n  getElement() { return this.#$tile; }\n\n  setX(x) {\n    this.#x = x;\n\n    this.#$tile.style.setProperty('--x', x);\n\n    return this;\n  }\n\n  setY(y) {\n    this.#y = y;\n\n    this.#$tile.style.setProperty('--y', y);\n\n    return this;\n  }\n\n  setCoords(x, y) {\n    this.setX(x);\n    this.setY(y);\n\n    return this;\n  }\n\n  setValue(value) {\n    this.#value = value;\n\n    this.#$tile.innerText = value;\n\n    return this;\n  }\n\n  remove() {\n    this.#$tile.remove();\n\n    return this;\n  }\n\n  delayTransition() {\n    return new Promise((resolve) => {\n      this.#$tile.addEventListener('transitionend', resolve, { once: true });\n    });\n  }\n\n  #initProps() {\n    this.#$tile.classList.add('tile');\n    this.#$tile.style.setProperty('--x', this.#x);\n    this.#$tile.style.setProperty('--y', this.#y);\n\n    this.#$tile.innerText = this.#value;\n  }\n}\n\nexport default Tile;\n","import { GAMEBOARD_SIZE } from './Grid.constants';\nimport { canMove, getRandomBetween, slideTiles } from './Grid.utils';\nimport GridEventManager from './Grid.eventManager';\nimport Cell from './Cell';\nimport Tile from './Tile';\n\nclass Grid {\n  #gridEventManager = new GridEventManager();\n\n  #cells = [];\n\n  #cellsGroupedByColumn = [];\n\n  #cellsGroupedByRow = [];\n\n  #size;\n\n  #$gameBoard;\n\n  constructor($gameBoard) {\n    this.#$gameBoard = $gameBoard;\n    this.#size = GAMEBOARD_SIZE;\n    this.#cellsGroupedByColumn = Array(GAMEBOARD_SIZE).fill(-1).map(() => []);\n    this.#cellsGroupedByRow = Array(GAMEBOARD_SIZE).fill(-1).map(() => []);\n\n    this.#createCells();\n    this.#createRandomTiles(2);\n    this.#gridEventManager.subscribe(this.#gridEventHandler.bind(this));\n  }\n\n  async slideTilesLeft() {\n    return this.#slideTilesHandler(this.#cellsGroupedByRow);\n  }\n\n  async slideTilesUp() {\n    return this.#slideTilesHandler(this.#cellsGroupedByColumn);\n  }\n\n  async slideTilesRight() {\n    return this.#slideTilesHandler(this.#cellsGroupedByRow.map((cells) => [...cells].reverse()));\n  }\n\n  async slideTilesDown() {\n    return this.#slideTilesHandler(this.#cellsGroupedByColumn.map((cells) => [...cells].reverse()));\n  }\n\n  #createCells() {\n    for (let i = 0; i < this.#size * this.#size; i += 1) {\n      const x = Math.floor(i / this.#size);\n      const y = i % this.#size;\n      const cell = new Cell(x, y);\n\n      this.#cellsGroupedByRow[x].push(cell);\n      this.#cellsGroupedByColumn[y].push(cell);\n      this.#cells.push(cell);\n      this.#$gameBoard.appendChild(cell.getElement());\n    }\n  }\n\n  #getRandomEmptyCells(num = 1) {\n    // TODO throw error for num > 2\n\n    const emptyCells = this.#cells.filter((cell) => cell.isEmpty());\n\n    if (num === 1) { return [emptyCells[getRandomBetween(0, emptyCells.length - 1)]]; }\n\n    const mid = Math.floor(emptyCells.length / 2);\n\n    return [\n      emptyCells[getRandomBetween(0, mid)],\n      emptyCells[getRandomBetween(mid + 1, emptyCells.length - 1)],\n    ];\n  }\n\n  #createRandomTiles(num = 1) {\n    this.#getRandomEmptyCells(num).forEach((cell) => {\n      const tile = new Tile(cell.getX(), cell.getY(), 2 ** getRandomBetween(1, 2));\n\n      cell.setTile(tile);\n      this.#$gameBoard.appendChild(tile.getElement());\n    });\n  }\n\n  async #slideTilesHandler(cellGroup) {\n    const { dirtyCells, transitions } = slideTiles(cellGroup);\n\n    return Promise.all(transitions).then(() => {\n      dirtyCells.forEach((cell) => cell.mergeTiles());\n      this.#createRandomTiles();\n    });\n  }\n\n  async #gridEventHandler(direction) {\n    if (this.#canMoveInAnyDirection()) {\n      switch (direction) {\n        case 'ArrowLeft':\n          if (this.#canMoveLeft()) { return this.slideTilesLeft(); }\n          break;\n        case 'ArrowUp':\n          if (this.#canMoveUp()) { return this.slideTilesUp(); }\n          break;\n        case 'ArrowRight':\n          if (this.#canMoveRight()) { return this.slideTilesRight(); }\n          break;\n        case 'ArrowDown':\n          if (this.#canMoveDown()) { return this.slideTilesDown(); }\n          break;\n        default:\n          return Promise.resolve();\n      }\n    } else { this.#gridEventManager.unsubscribe(); }\n\n    return Promise.resolve();\n  }\n\n  #canMoveInAnyDirection() {\n    return this.#canMoveLeft()\n      || this.#canMoveUp()\n      || this.#canMoveRight()\n      || this.#canMoveDown();\n  }\n\n  #canMoveLeft() { return canMove(this.#cellsGroupedByRow); }\n\n  #canMoveUp() { return canMove(this.#cellsGroupedByColumn); }\n\n  #canMoveRight() {\n    return canMove(this.#cellsGroupedByRow.map((cells) => [...cells].reverse()));\n  }\n\n  #canMoveDown() {\n    return canMove(this.#cellsGroupedByColumn.map((cells) => [...cells].reverse()));\n  }\n}\n\nexport default Grid;\n","import Grid from './components/Grid';\n\n(function bootstrapGame() {\n  document.documentElement.style.setProperty('--main-background-color', '#2E251A');\n  document.documentElement.style.setProperty('--game-board-background-color', '#83786E');\n  document.documentElement.style.setProperty('--cell-background-color', '#A99E94');\n  document.documentElement.style.setProperty('--grid-size', '4');\n  document.documentElement.style.setProperty('--cell-size', '20vmin');\n  document.documentElement.style.setProperty('--cell-gap', '2vmin');\n  document.documentElement.style.setProperty('--default-font-family', '\\'Quicksand\\', Helvetica Neue, Helvetica, Arial, sans');\n  document.documentElement.style.setProperty('--default-font-size', '7.5vmin');\n}());\n\nexport default new Grid(document.getElementById('game-board'));\n"],"names":["$dfaa75130aef0ee7$export$8793edee2d425525","$dfaa75130aef0ee7$export$a4ef2b0c3fa55ad2","cellGroup","some","cells","cell","index","isEmpty","canAcceptTile","getTile","$dfaa75130aef0ee7$export$1de24da2550aa97f","min","max","Math","floor","random","$68903aab41baa91d$export$2e2bcd8739ae039","isPaused","boundedKeydownHandler","this","keydownHandler","bind","callback","subscribe","window","addEventListener","unsubscribe","removeEventListener","async","ev","key","$43b21bd6d00b28a1$export$2e2bcd8739ae039","x","y","$cell","tile","tileToMerge","constructor","document","createElement","initProps","getX","getY","getCoords","getTileToMerge","getElement","setX","style","setProperty","setY","setCoords","setTile","setTileToMerge","hasTileToMerge","getValue","mergeTiles","setValue","remove","classList","add","$64da06b4ec3ada82$export$2e2bcd8739ae039","value","$tile","innerText","delayTransition","Promise","resolve","once","$4d894c0568f6ab6a$export$2e2bcd8739ae039","gridEventManager","cellsGroupedByColumn","cellsGroupedByRow","size","$gameBoard","Array","fill","map","createCells","createRandomTiles","gridEventHandler","slideTilesHandler","reverse","i","push","appendChild","getRandomEmptyCells","num","emptyCells","filter","length","mid","num1","forEach","dirtyCells","transitions","currCell","lastValidCell","j","nextCell","$dfaa75130aef0ee7$export$5a836f2f16825912","all","then","direction","canMoveInAnyDirection","canMoveLeft","slideTilesLeft","canMoveUp","slideTilesUp","canMoveRight","slideTilesRight","canMoveDown","slideTilesDown","documentElement","getElementById"],"version":3,"file":"index.995c08aa.js.map"}